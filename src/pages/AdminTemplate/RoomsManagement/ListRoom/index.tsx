import React, { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";

import { getAllRoomsApi, deleteRoomApi } from "@/services/room.api";
import type { Room } from "@/interfaces/room.interface";
import { AddRoomForm } from "@/pages/AdminTemplate/RoomsManagement/AddRoom";

export function TableRoom() {
  const [page, setPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState(""); // üîç T·ª´ kh√≥a t√¨m ki·∫øm
  const pageSize = 10;
  const queryClient = useQueryClient();

  // üü¢ L·∫•y danh s√°ch ph√≤ng
  const {
    data: rooms,
    isLoading,
    isError,
  } = useQuery({
    queryKey: ["rooms"],
    queryFn: getAllRoomsApi,
  });

  // üü¢ Mutation x√≥a ph√≤ng
  const deleteMutation = useMutation({
    mutationFn: deleteRoomApi,
    onSuccess: () => {
      alert("‚úÖ X√≥a ph√≤ng th√†nh c√¥ng!");
      queryClient.invalidateQueries({ queryKey: ["rooms"] });
    },
    onError: (err: any) => {
      console.error("‚ùå L·ªói khi x√≥a ph√≤ng:", err);
      alert("L·ªói khi x√≥a ph√≤ng!");
    },
  });

  const handleDelete = (id: number) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng n√†y kh√¥ng?")) {
      deleteMutation.mutate(id);
    }
  };

  if (isLoading)
    return <div className="text-center py-10">ƒêang t·∫£i d·ªØ li·ªáu...</div>;

  if (isError)
    return (
      <div className="text-center py-10 text-red-500">
        L·ªói khi t·∫£i d·ªØ li·ªáu.
      </div>
    );

  // üîç L·ªçc ph√≤ng theo t·ª´ kh√≥a (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
  const filteredRooms =
    rooms?.filter(
      (room: Room) =>
        room.tenPhong?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        room.moTa?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        room.giaTien?.toString().includes(searchTerm)
    ) || [];

  const totalRooms = filteredRooms.length;
  const totalPages = Math.ceil(totalRooms / pageSize);
  const start = (page - 1) * pageSize;
  const currentRooms = filteredRooms.slice(start, start + pageSize);

  return (
    <div className="w-full overflow-x-auto">
      {/* üîç √î t√¨m ki·∫øm */}
      <div className="flex justify-between items-center mb-4">
        <Input
          type="text"
          placeholder="T√¨m ki·∫øm ph√≤ng theo t√™n, m√¥ t·∫£, ho·∫∑c gi√°..."
          value={searchTerm}
          onChange={(e) => {
            setSearchTerm(e.target.value);
            setPage(1); // reset v·ªÅ trang ƒë·∫ßu khi t√¨m ki·∫øm
          }}
          className="w-1/3"
        />

        {/* N√∫t th√™m ph√≤ng */}
        
      </div>

      {/* B·∫¢NG DANH S√ÅCH PH√íNG */}
      <Table className="table-auto border-collapse w-full">
        <TableCaption>Danh s√°ch ph√≤ng</TableCaption>
        <TableHeader>
          <TableRow>
            <TableHead className="text-center">STT</TableHead>
            <TableHead className="text-center">ID</TableHead>
            <TableHead>T√™n ph√≤ng</TableHead>
            <TableHead>Gi√°</TableHead>
            <TableHead>H√¨nh ·∫£nh</TableHead>
            <TableHead>M√¥ t·∫£</TableHead>
            <TableHead className="text-center">H√†nh ƒë·ªông</TableHead>
          </TableRow>
        </TableHeader>

        <TableBody>
          {currentRooms.map((room: Room, idx: number) => (
            <TableRow key={room.id}>
              <TableCell className="text-center">{start + idx + 1}</TableCell>
              <TableCell className="text-center">{room.id}</TableCell>
              <TableCell className="truncate max-w-[180px]">
                {room.tenPhong}
              </TableCell>
              <TableCell>{room.giaTien}</TableCell>
              <TableCell>
                <img
                  src={room.hinhAnh}
                  alt={room.tenPhong}
                  className="h-12 w-20 object-cover rounded"
                />
              </TableCell>
              <TableCell>
                <Dialog>
                  <DialogTrigger asChild>
                    <button className="text-blue-500 hover:underline">
                      Chi ti·∫øt
                    </button>
                  </DialogTrigger>
                  <DialogContent className="max-w-lg">
                    <DialogHeader>
                      <DialogTitle>Chi ti·∫øt ph√≤ng</DialogTitle>
                    </DialogHeader>
                    <p>{room.moTa || "Kh√¥ng c√≥ m√¥ t·∫£"}</p>
                  </DialogContent>
                </Dialog>
              </TableCell>

              <TableCell className="text-center">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline">
                      <i className="fa-solid fa-ellipsis-vertical"></i>
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent>
                    <DropdownMenuGroup>
                      {/* S·ª≠a ph√≤ng */}
                      <DropdownMenuItem onSelect={(e) => e.preventDefault()}>
                        <AddRoomForm status={1} room={room}>
                          <span className="flex items-center gap-2 cursor-pointer">
                            <i className="fa-solid fa-pen-to-square"></i> Ch·ªânh s·ª≠a
                          </span>
                        </AddRoomForm>
                      </DropdownMenuItem>

                      {/* X√≥a ph√≤ng */}
                      <DropdownMenuItem
                        onSelect={(e) => e.preventDefault()}
                        onClick={() => handleDelete(room.id)}
                      >
                        <span className="flex items-center gap-2 cursor-pointer text-red-500">
                          <i className="fa-solid fa-trash"></i> X√≥a
                        </span>
                      </DropdownMenuItem>
                    </DropdownMenuGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </TableCell>
            </TableRow>
          ))}

          {currentRooms.length === 0 && (
            <TableRow>
              <TableCell colSpan={7} className="text-center py-5 text-gray-500">
                Kh√¥ng t√¨m th·∫•y ph√≤ng ph√π h·ª£p.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>

      {/* PH√ÇN TRANG */}
      <div className="flex justify-center items-center gap-2 mt-4">
        <button
          onClick={() => setPage((p) => Math.max(p - 1, 1))}
          disabled={page === 1}
          className="px-3 py-1 border rounded disabled:opacity-50"
        >
          Tr∆∞·ªõc
        </button>
        <span>
          Trang {page} / {totalPages}
        </span>
        <button
          onClick={() => setPage((p) => Math.min(p + 1, totalPages))}
          disabled={page === totalPages}
          className="px-3 py-1 border rounded disabled:opacity-50"
        >
          Sau
        </button>
      </div>
    </div>
  );
}
