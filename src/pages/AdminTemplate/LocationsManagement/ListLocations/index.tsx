import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { AddLocationForm } from "@/pages/AdminTemplate/LocationsManagement/AddLocation";
import { Button } from "@/components/ui/button";
import { useEffect, useState, useMemo } from "react";
import {
  getListLocationPaginationApi,
  deleteLocationApi,
} from "@/services/location.api";
import type { Location } from "@/interfaces/location.interface";

interface TableLocationProps {
  searchTerm: string;
}

export function TableLocation({ searchTerm }: TableLocationProps) {
  const [page, setPage] = useState(1);
  const pageSize = 10;
  const [locations, setLocations] = useState<Location[]>([]);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);

  // üü¢ H√†m fetch l·∫°i d·ªØ li·ªáu
  const fetchLocations = async () => {
    setLoading(true);
    try {
      const res = await getListLocationPaginationApi(page, pageSize);
      if (res) {
        setLocations(res);
        setTotalPages(5); // t·∫°m th·ªùi fix c·ª©ng (v√¨ API demo kh√¥ng tr·∫£ totalPages)
      }
    } catch (error) {
      console.log("‚ùå ~ fetchData:", error);
    } finally {
      setLoading(false);
    }
  };

  // G·ªçi API khi ƒë·ªïi page
  useEffect(() => {
    fetchLocations();
  }, [page]);

  // üü¢ H√†m x√≥a v·ªã tr√≠
  const handleDelete = async (id: number) => {
    const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a v·ªã tr√≠ n√†y?");
    if (!confirmDelete) return;

    try {
      await deleteLocationApi(id);
      alert("‚úÖ X√≥a v·ªã tr√≠ th√†nh c√¥ng!");
      fetchLocations(); // c·∫≠p nh·∫≠t l·∫°i danh s√°ch
    } catch (error: any) {
      console.error("‚ùå L·ªói khi x√≥a:", error);
      alert(error.response?.data?.content || "X√≥a th·∫•t b·∫°i!");
    }
  };

  // L·ªçc theo t·ª´ kh√≥a search
  const filteredLocations = useMemo(() => {
    if (!searchTerm.trim()) return locations;
    return locations.filter((loc) =>
      [loc.tenViTri, loc.tinhThanh, loc.quocGia].some((field) =>
        field?.toLowerCase().includes(searchTerm.toLowerCase())
      )
    );
  }, [locations, searchTerm]);

  return (
    <div className="w-full overflow-x-auto">
      {/* üü¢ N√∫t th√™m v·ªã tr√≠ */}
      <div className="flex justify-end mb-4">
        <AddLocationForm status={0} onSuccess={fetchLocations}>
          <Button className="bg-red-500 text-white hover:bg-red-600">
            + Th√™m v·ªã tr√≠
          </Button>
        </AddLocationForm>
      </div>

      <Table className="table-auto border-collapse w-full">
        <TableCaption>Danh s√°ch v·ªã tr√≠.</TableCaption>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px] text-center">STT</TableHead>
            <TableHead className="w-[70px] text-center">ID</TableHead>
            <TableHead className="w-[150px]">T√™n v·ªã tr√≠</TableHead>
            <TableHead className="w-[200px]">T·ªânh/Th√†nh</TableHead>
            <TableHead className="w-[150px]">Qu·ªëc gia</TableHead>
            <TableHead className="w-[120px] text-center">H√¨nh ·∫£nh</TableHead>
            <TableHead className="w-[50px] text-center">H√†nh ƒë·ªông</TableHead>
          </TableRow>
        </TableHeader>

        <TableBody>
          {loading ? (
            <TableRow>
              <TableCell colSpan={7} className="text-center">
                ƒêang t·∫£i d·ªØ li·ªáu...
              </TableCell>
            </TableRow>
          ) : filteredLocations.length === 0 ? (
            <TableRow>
              <TableCell colSpan={7} className="text-center">
                Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ ph√π h·ª£p
              </TableCell>
            </TableRow>
          ) : (
            filteredLocations.map((loc, index) => (
              <TableRow key={loc.id}>
                <TableCell className="text-center">
                  {(page - 1) * pageSize + index + 1}
                </TableCell>
                <TableCell className="text-center">{loc.id}</TableCell>
                <TableCell>{loc.tenViTri}</TableCell>
                <TableCell>{loc.tinhThanh}</TableCell>
                <TableCell>{loc.quocGia}</TableCell>
                <TableCell className="text-center">
                  <img
                    src={loc.hinhAnh}
                    alt={loc.tenViTri}
                    className="w-20 h-14 object-cover rounded"
                  />
                </TableCell>
                <TableCell className="text-center">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline">
                        <i className="fa-solid fa-ellipsis-vertical"></i>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent className="w-32" align="start">
                      <DropdownMenuGroup>
                        {/* üü¢ Ch·ªânh s·ª≠a */}
                        <DropdownMenuItem onSelect={(e) => e.preventDefault()}>
                          <AddLocationForm
                            status={1}
                            location={loc}
                            onSuccess={fetchLocations}
                          >
                            <span className="flex items-center gap-2 cursor-pointer">
                              <i className="fa-solid fa-pen-to-square"></i>
                              Ch·ªânh s·ª≠a
                            </span>
                          </AddLocationForm>
                        </DropdownMenuItem>

                        {/* üü¢ X√≥a v·ªã tr√≠ */}
                        <DropdownMenuItem
                          onClick={() => handleDelete(loc.id)}
                          className="text-red-500 cursor-pointer"
                        >
                          <i className="fa-solid fa-trash mr-2"></i>
                          X√≥a
                        </DropdownMenuItem>
                      </DropdownMenuGroup>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))
          )}
        </TableBody>
      </Table>

      {/* Pagination */}
      <div className="flex justify-center items-center gap-2 mt-4">
        <button
          onClick={() => setPage((p) => Math.max(p - 1, 1))}
          disabled={page === 1}
          className="px-3 py-1 border rounded disabled:opacity-50"
        >
          Tr∆∞·ªõc
        </button>
        <span>
          Trang {page} / {totalPages}
        </span>
        <button
          onClick={() => setPage((p) => Math.min(p + 1, totalPages))}
          disabled={page === totalPages}
          className="px-3 py-1 border rounded disabled:opacity-50"
        >
          Sau
        </button>
      </div>
    </div>
  );
}
